<?php

declare(strict_types=1);

namespace Tests\ToDoList\Infrastructure\Repository;

use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;

use Illuminate\Support\Facades\Validator;
use Src\ToDoList\Domain\Task;
use Src\ToDoList\Infrastructure\Model\Task as TaskModel;
use Src\ToDoList\Infrastructure\Repository\TaskRepository;
use Tests\Auth\MotherObject\UserMotherObject;
use Tests\TestCase;
use Tests\ToDoList\Domain\MotherObject\TaskMotherObject;

class TaskRepositoryTest extends TestCase
{
    //use RefreshDatabase;

   /* public function setUp(): void
    {
        parent::setUp();
        TaskModel::unsetEventDispatcher();// TODO: Change the autogenerated stub
    }*/

    public function SaveAndGetById(): void
    {
        //Given
        $createdBy = UserMotherObject::buildDefault(id: 99, name: 'Test Creator');
        $assignedTo = UserMotherObject::buildDefault(id: 99, name: 'Test Assignee');

        $domainTask = TaskMotherObject::buildDefault(
            id: null,
            createdBy: $createdBy,
            assignedTo: $assignedTo,
            text: 'Test'
        );

        $repository = new TaskRepository();

        // When
        $savedTask = $repository->save($domainTask);

        // Then
        $this->assertNotNull($savedTask->id(), 'La tarea guardada debe tener un id asignado');

        $retrievedTask = $repository->getById($savedTask->id());
        $this->assertInstanceOf(Task::class, $retrievedTask);
        $this->assertEquals($savedTask->id(), $retrievedTask->id());
        $this->assertEquals($savedTask->text(), $retrievedTask->text());
        $this->assertEquals($savedTask->status(), $retrievedTask->status());
    }
}
